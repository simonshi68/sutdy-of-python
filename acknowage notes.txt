crossin.com>python零基础入门
8-5：文件读写
1.读文件：
语法：
f=open('python.txt')		#打开文件成为一个名为f的对象
f.read()					#读取上面已经打开的文件
crossin的编程教室			#文件内容显示出来了
f.readline()				#读一行
f.readlines()				#把内容按行读取至一个list中
f.close()					#关闭上面打开的这个文件
例：
f=open(r'd:\help\readme.txt')  #这里的r是规定一整个行都不被转义,f是变量
data=f.read()                  #data也是变量
pring(data)					   #打印
line=f.readline()
print(line)
l

2.文件写入：
打开文件
写入文件
关闭文件
详解：
	1.打开文件：
	  为了写入文件，在打开文件时要在open()函数里加入“写入模式参数”，语法如下：
		f.open('python.txt','w')   #这里的‘w’就是写入模式参数。
	  写入模式参数包括
	  模式	描述
	  r     #以只读模式打开文件，文件的指针将会放在文件开头，这是默认模式（等于 f.open())
	  rb    #以二进制格式打开文件用于只读。文件指针将会放在文件开头，这是默认模式
	  r+    #打开一个文件用于读写，文件指针讲放在文件开头
	  rb+	#以二进制格式打开文件用于读写，指针放在文件开头
	  w		#打开一个文件用于写入。如果该文件存在则将其覆盖，否则就新建一个文件
	  wb	#以二进制格式打开文件用于写入。如果该文件存在则将其覆盖，否则就新建一个文件
	  w+	#打开一个文件用于读写。如果该文件已存在则将其覆盖，否则就新建一个文件
	  wb+	#以二进制格式打开文件用于读写。如果该文件存在则将其覆盖，否则就新建一个文件
	  a		#打开一个文件用于追加。如果该文件存在，文件指针将会放在文件结尾，会在文件结尾开始写入新内容。如果文件不存在，则创建新文件进行写入
	  ab	#以二进制格式打开一个文件用于追加。如果该文件存在，文件指针将会放在文件结尾，会在文件结尾开始写入新内容。如果文件不存在，则创建新文件进行写入打开一个文件用于追加。如果该文件存在，文件指针将会放在文件结尾，会在文件结尾开始写入新内容。如果文件不存在，则创建新文件进行写入
	  a+	#打开一个文件用于追加读写。如果该文件存在，文件指针将会放在文件结尾，会在文件结尾开始写入新内容。如果文件不存在，则创建新文件进行写入。如果该文件存在，文件指针将会放在文件结尾，会在文件结尾开始写入新内容。如果文件不存在，则创建新文件进行写入
	  ab+	#以二进制格式打开文件用于写入。如果该文件存在则将其覆盖，否则就新建一个文件打开一个文件用于追加读写。如果该文件存在，文件指针将会放在文件结尾，会在文件结尾开始写入新内容。如果文件不存在，则创建新文件进行写入。如果该文件存在，文件指针将会放在文件结尾，会在文件结尾开始写入新内容。如果文件不存在，则创建新文件进行写入
	  
	  以上模式的记忆法：
	  三种主要的模式：
	  r: read,只读
	  w: write,只写，重写
	  a: append,追加
	  上述三种模式的变形：
	  b: binary,二进制
	  +：读写合一
	  变形只能附加在主要模式上，进行组合。
	  Tips:
	  b: 二进制格式用于图片、音频、视频等多媒体格式的文件读写
	  a: 是在文件结尾追加写入
	  r+:在文件开头追加写入

	2.写入文件：
	  在可写入模式下打开文件后，可以两种方式写入：
	  wirte
		f.write('crossin的编程教室')
		wirte只能接收一个字符串对象，换行可以使用换行符\n,如：f.write('crossin的编程教室\n')
	  writelines
		f.writelines(['crossin\n','编程\n\,'教室'])
		writelines与readlines相应，接收一个列表，一次写入列表中的元素
		正如readlines会读取文件每一行末尾的换行符，writelines接收列表中的元素如果想要换行，也必须在元素末尾加上\n
	3.关闭文件：
	  关闭写入模式的文件与关闭读取模式的文件相同：f.close(),但是，写入的内容要在文件关闭时才触发保存。如果不关闭文件，则只能读取写入前已经打开的内容
	 
3.异常处理
  常用语句：try...except
  a=input('inputsomthing')
  try:
     int(a)
  except ValueError:
     #do something
  except SyntaxError:
     #do something
  except #后面省略异常类型的话，出现任何异常都会执行下面的语句：
     #do something
  finlly: #如果没有finally，则前面出现异常时，程序后面的语句将不会被执行，有了finally，则无论前面有无异常，都会执行finally后的语句
     f.close() # 或者其他do something 的语句，一般是程序里的
  else: #如果前面没有出现异常，则执行else后面缩进的语句
     #do something

pickle模块：
